---
title: "Class 8: PCA Mini Project"
author: "Woocheol Kim (PID: A16998418)"
format: pdf
---

It is important to consider scalling.



```{r}
colMeans(mtcars)
```

```{r}
apply(mtcars, 2, sd)
```

```{r}
x <- scale(mtcars)
head(x)
```


```{r}
round(colMeans(x),2)
```

Key-point: It is usually always a good idea to scale your data before to PCA...

## Preparing the Data

# Save your input data file into your Project directory
```{r}
fna.data <- "WisconsinCancer.csv"
```

# Complete the following code to input the data and store as wisc.df
```{r}
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
View(wisc.df)
```

```{r}
head(wisc.df)
```

```{r}
wisc.data <- wisc.df[,-1]
```


```{r}
diagnosis <- wisc.df[,1]
table(diagnosis)
```

Remove this first `diagnosis` column from the dataset as I don't want to pass this to PCA etc It is essentially the expert "answer" that we will compare our analysis results to. 
```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
head(wisc.data)
```
```{r}
dim(wisc.df)
```

```{r}
nrow(wisc.df)
```


```{r q3}
length( grep("_mean", colnames(wisc.data)) )
```

##Exploratory data analysis 


> Q1. How many observations are in this dataset?

569

> Q2. How many of the observations have a malignant diagnosis?

212

> Q3. How many variables/features in the data are suffixed with _mean?

10


```{r}
wisc.pr <- prcomp( wisc.data, scale=T )
summary(wisc.pr)
```

Main "PC score plot", "PC1 vs PC2 plot"

See what is in our PCA result object:

```{r}
attributes(wisc.pr)
```


```{r}
#wisc.pr$x
plot(wisc.pr$x[,1], wisc.pr$x[,2], 
     col=as.factor(diagnosis))
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

0.4427

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs


```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

There is so much on this plot as the it is very hard to read and understand what is going on. There is so much datasets that there is all the information in this one plot when we do not need it. 

```{r}
# Scatter plot observations by components 1 and 2
plot( wisc.pr$x[,1], wisc.pr$x[,2] , col = as.factor(diagnosis) , 
     xlab = "PC1", ylab = "PC2")
```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

From these plots, I noticed that PC1 roughly remains the same, and the two plots are pretty similar. PC3 does go up to 10 though but mostly stays the same.

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3] , col = as.factor(diagnosis) ,
     xlab = "PC1", ylab = "PC3")
```


```{r}
x <- summary(wisc.pr)
plot(x$importance[2,], typ="b")
```

>Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

concave.points_mean is -0.25840048

```{r}
wisc.pr$rotation[,1]
```


>Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

The minumum number of principal components required to explain 80% of the variance of the data is PC 5. 


## Combine PCA and clustering

Our PCA results were in `wisc.pr$x`

```{r}
# distance matrix from PCA result
d <- dist( wisc.pr$x[,1:3] )
hc <- hclust(d, method = "ward.D2")
plot(hc)
```

Cut tree into two groups/branches/clusters...
```{r}
grps <- cutree(hc, k=2)
```

```{r}
plot(wisc.pr$x, col=grps)
```

Compare my clustering result (my `grps`) to the expert `diagnosis`

```{r}
table(diagnosis)
```

```{r}
table(grps)
```

```{r}
table(diagnosis, grps)
```

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

```{r}
data.dist <- dist(data.scaled)
```


```{r}
wisc.hclust <- hclust(data.dist, method = "complete")
```

> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

Height is 19.

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=10)
table(wisc.hclust.clusters, diagnosis)
```

> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

A better cluster vs diagnoses match by cutting into a different number of clusters would be clust 2 because it has the highest count of M found. 


>Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

"Ward.D2" gives my favorite results for the same data.dist dataset because the branches is the most neat and clearly can see the separation between the points.

```{r}
wisc.hclust <- hclust(data.dist, method = "single")

plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

```{r}
wisc.hclust <- hclust(data.dist, method = "average")

plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```


```{r}
wisc.hclust <- hclust(data.dist, method = "ward.D2")

plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

